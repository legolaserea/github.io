<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DualBear</title>
  
  <subtitle>克制与专注</subtitle>
  <link href="/legolaserea.github.io/atom.xml" rel="self"/>
  
  <link href="https://www.dualbear.com/"/>
  <updated>2019-03-01T04:20:34.022Z</updated>
  <id>https://www.dualbear.com/</id>
  
  <author>
    <name>DualBear</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>测试</title>
    <link href="https://www.dualbear.com/2019/02/28/%E6%B5%8B%E8%AF%95/"/>
    <id>https://www.dualbear.com/2019/02/28/测试/</id>
    <published>2019-02-28T10:58:54.000Z</published>
    <updated>2019-03-01T04:20:34.022Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\legolaserea.github.io\assets\css\APlayer.min.css"><script src="\legolaserea.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="测试下"><a href="#测试下" class="headerlink" title="测试下"></a>测试下</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\legolaserea.github.io\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\legolas
      
    
    </summary>
    
      <category term="随想" scheme="https://www.dualbear.com/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
      <category term="随想" scheme="https://www.dualbear.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>我讲两个故事--关于配角</title>
    <link href="https://www.dualbear.com/2017/05/06/About-supporting-role/"/>
    <id>https://www.dualbear.com/2017/05/06/About-supporting-role/</id>
    <published>2017-05-06T07:21:35.000Z</published>
    <updated>2019-03-01T08:47:41.993Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\legolaserea.github.io\assets\css\APlayer.min.css"><script src="\legolaserea.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center"><p><img src="http://pnoc9e0c7.bkt.clouddn.com/mantianxing.jpg" alt="满天星"></p></blockquote><p>　　关于配角，想到以前看到过的两个故事，讲给你听。</p><a id="more"></a><blockquote><p>一个是关于满天星。</p></blockquote><p>　　满天星的另外一个名字叫六月雪，花细如豆且白，略有微香，宛若无际夜空中的点点繁星，似雾般朦胧，极具婉约、雅素之美，又如爱人的呼吸般温柔动人，是花束中不可缺少的配角。现今驰誉遇遂的名花，大多在陈列上充当”主角”。但多年来享誉环球的满天星，却是难能可贵的”配角”。当插花走上艺术之巅时，满天星跃居世界10大花之一，同玫瑰、郁金香、康乃馨等名花平起平坐。</p><p>　　关于满天星有这样一个传说，在遥远的希腊国度，有两个很要好的姐妹。她们每天都幸福地生活在一起，彼此之间没有任何秘密。</p><p>　　直到有一天，这个小小的山村里来了一个少年，他身负重伤跌倒在路边。而这对姐妹中的妹妹救了这个少年。少年昏迷中只记得有一双温柔的眼睛注视着自己，希望他可以坚强地活下来。妹妹让姐姐照顾这个少年，然后自己去请医生。就在这段时间里，少年清醒了过来，误以为是她姐姐救了自己。那天晚上，姐姐对妹妹说：“我爱上了那个少年。”妹妹就这样看着他们两人成为情侣，每天幸福地生活在一起。</p><p>　　看着她姐姐幸福的样子，妹妹对少年一次又一次掩藏了自己的爱意。</p><p>　　直到有一天，阿瑞斯追查少年，来到了这个小山村。他用全村人的性命逼少年现身。 她姐姐害怕了，乞求少年离开山村。就在少年答应姐姐请求的那一刻，妹妹将少年迷晕了，然后自己扮成少年的模样。她被阿瑞斯杀害了。鲜血染红了整个山村，而这个女孩儿的灵魂却一直悬在夜空中。她用最后的力气将少年的记忆抹去，并祈求姐姐给少年幸福。</p><p>　　花神在得知此事之后，就将她飘散的灵魂融入少年被迷晕倒下的那一片草地。于是，那片草地上开满了斑斑驳驳白色的花瓣，也就是满天星。</p><p>　　所以，满天星的花语是配角和甘做配角的爱。</p><hr><blockquote><p>另一个是米切尔·恩德的名篇 <strong>《奥菲利亚的影子剧院》</strong>。</p></blockquote><p>　　说很久以前有个孤独的老太太名叫奥菲丽亚。她父母希望她成为明星，给她起了莎剧里面这个闪闪发亮的名字。</p><p>　　她声音很小，没能成为演员，长大然后又老了，变成孤单的老小姐。但是她一直在台上，从那个小箱子里面，用她细小的声音提示台词。她一生爱着伟大的戏剧，悲剧啊，喜剧啊，后来慢慢老了，人们也不再在小城里看戏了。<br>　　在她独自向剧院告别的时候，她遇到一个孤单的影子。<br>　　大家都知道影子总是有主人的，可是世界上还有很多没主的影子呢，它们很害怕，也很孤单。老太太遇到的这个影子叫做流浪汉。<br>　　老太太呢就收留了它。后来又有许多影子听说了，来投奔她，所以她又收留了许多影子。<br>　　可是影子太多了就会争吵，老太太就教他们读伟大的戏剧，平息它们之间的矛盾。<br>　　小城里面传说，她是个脑子不正常的老太太，所以房东就故意多要她一倍房租，她付不起，就被赶走啦。<br>　　她拎着一手提包影子胡乱上了火车，走啊走啊，走到大海边。<br>　　老太太独自坐在灰色大海边，大衣，手提包，小小背影。<br>　　老太太又累又饿睡着了。影子们就商量说：我们拖累了她，怎么样才能帮她呢？……<br>　　老太太醒来，影子们告诉她，它们要组织一个“影子剧院”。<br>　　老太太到村子里面，拉开一块白床单，影子们就在后面表演起来。<br>　　先是孩子来看，再接着是大人，大家都喜欢上了，都被感动了，她挣够钱可以活下去了，慢慢的她就出名了。她就用挣的钱买了一辆车，带着影子们到处演出，周游世界。<br>　　可是有一天，来了一个特别大，特别黑的影子。</p><p>　　“你也是一个没有人要的影子吗？”她问。<br>　　“是的，”那个大黑影子慢慢地说，“我想可以这么说吧！”<br>　　“你也想上我这儿来吗？”奥菲利娅小姐问。<br>　　“你能收留我吗？”影子问道，并走得更近。<br>　　“我的影子虽然已经非常多了，可是，你总得有地方呆吧！”老小姐说。<br>　　“你不想先问问我的名字吗？”影子问。<br>　　“那你到底叫什么？”<br>　　“别人叫我死神。” 听到这，奥菲利娅小姐好一会儿没有说话。<br>　　“尽管这样，你还是会收留我，对吗？”最后，影子温和地问道。<br>　　“是的，”奥菲利娅小姐说，“你来吧！” </p><p>　　于是巨大的黑暗，温柔地包裹住她。<br>　　等她睁开眼睛，她看到天堂的大门开了，明亮的，得救的影子们，拥簇着她走进去。<br>　　她被领到一个最漂亮、最豪华的剧院面前，门口的烫金字是：<br>　　奥菲丽亚的影子剧院 </p><p>　　从此，他们就一直在演出，天使们能够理解这些故事，并从中了解到，生活在地上的人们是多么痛苦、多么伟大、多么悲伤，同时又多么可笑。<br>　　有时候上帝也来呢。 </p><hr><p>　　大概在故事的花神心里，在没人要的影子们心里，真正的主角其实是满天星的妹妹，是善良的奥菲利亚吧。所以呢，当面对生活的不幸遭遇时，当被沦为卑微的配角时，请努力保持善良的心和对生命的热爱，总有一天你也会成为某些人心中的主角。</p>        <div id="aplayer-oDNqaoOm" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-oDNqaoOm"),            narrow: false,            autoplay: false,            showlrc: 3,            music: {              title: "All alright",              author: "Sigur Rós",              url: "http://music.163.com/song/media/outer/url?id=22212233.mp3",              pic: "http://pnoc9e0c7.bkt.clouddn.com/All%20Alright.jpg",              lrc: "http://pnoc9e0c7.bkt.clouddn.com/All%20Alright.lrc"            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>        <div id="aplayer-hzJSbWIP" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>  <script>  var options = {"narrow":false,"autoplay":false,"showlrc":3,"mutex":true,"width":"60%","music":[{"title":"All alright","author":"Sigur Rós","url":"http://music.163.com/song/media/outer/url?id=22212233.mp3","pic":"http://pnoc9e0c7.bkt.clouddn.com/All%20Alright.jpg","lrc":"http://pnoc9e0c7.bkt.clouddn.com/All%20Alright.lrc"},{"title":"Sabbath","author":"Mono","url":"http://music.163.com/song/media/outer/url?id=776820.mp3","pic":"http://pnoc9e0c7.bkt.clouddn.com/One%20Step%20More%20and%20You%20Die.jpg"},{"title":"Dream Odyssey","author":"Mono","url":"http://music.163.com/song/media/outer/url?id=776622.mp3","pic":"http://pnoc9e0c7.bkt.clouddn.com/For%20My%20Parents.jpg"}]};  options.element = document.getElementById("aplayer-hzJSbWIP");  var ap = new APlayer(options);    window.aplayers || (window.aplayers = []);  window.aplayers.push(ap);  </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;http://pnoc9e0c7.bkt.clouddn.com/mantianxing.jpg&quot; alt=&quot;满天星&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　关于配角，想到以前看到过的两个故事，讲给你听。&lt;/p&gt;
    
    </summary>
    
      <category term="随想" scheme="https://www.dualbear.com/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
      <category term="随想" scheme="https://www.dualbear.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="碎碎念" scheme="https://www.dualbear.com/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>NGINX初学指南(安装与简单配置)</title>
    <link href="https://www.dualbear.com/2017/04/24/nginx-guide/"/>
    <id>https://www.dualbear.com/2017/04/24/nginx-guide/</id>
    <published>2017-04-24T08:56:15.000Z</published>
    <updated>2019-03-01T07:04:31.558Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\legolaserea.github.io\assets\css\APlayer.min.css"><script src="\legolaserea.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://pnoc9e0c7.bkt.clouddn.com/NGINX.png" alt></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>走上了VPS这条<del>不归路</del>, 就意味着需要会维护以及运营自己的服务器. 那么这一章记录一下学习Nginx的一些东西…<br>本文绝大部分内容来自NGINX 网站的官方手册:<br><strong><em><a href="https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/" target="_blank" rel="noopener">https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/</a></em></strong><br><strong><em><a href="http://nginx.org/en/docs/beginners_guide.html" target="_blank" rel="noopener">http://nginx.org/en/docs/beginners_guide.html</a></em></strong></p></blockquote><a id="more"></a><h1 id="安装NGINX部分"><a href="#安装NGINX部分" class="headerlink" title="安装NGINX部分"></a>安装NGINX部分</h1><h2 id="主干版本VS稳定版本"><a href="#主干版本VS稳定版本" class="headerlink" title="主干版本VS稳定版本"></a>主干版本VS稳定版本</h2><p>NGINX 有两个有效版本: </p><ul><li>主干版本. 这个版本中包含了最新的功能和 BUG 修复, 并且总是最新的版本. 这个版本很可靠, 但是也包含了一些实验性质的模块和一定数量的新 BUG. </li><li>稳定版本. 这个版本没有最新的功能, 但是包含了关键 BUG 的修复. 在生产服务器中推荐使用稳定版本. </li></ul><h2 id="预编译包VS源码编译"><a href="#预编译包VS源码编译" class="headerlink" title="预编译包VS源码编译"></a>预编译包VS源码编译</h2><p>NGINX 的主干版本和稳定版本都可以以下两种方式安装: </p><ul><li>预编译包安装. 这是一种快捷的安装方式. 预编译包中含有几乎所有 NGINX 官方模块并且适用于大多数主流的操作系统. </li><li>通过源码编译安装. 这种方式更加灵活: 你可以添加包括第三方模块在内的特殊模块以及最新的安全补丁. </li></ul><h2 id="通过源码编译和安装"><a href="#通过源码编译和安装" class="headerlink" title="通过源码编译和安装"></a>通过源码编译和安装</h2><blockquote><p>通过源码编译 NGINX 带给你更多的灵活性: 你可以添加包括第三方模块在内的特殊模块以及最新的安全补丁. </p></blockquote><p>先安装一些编译依赖:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install -y build-essential libtool</span><br></pre></td></tr></table></figure></p><h3 id="安装-NGINX-依赖"><a href="#安装-NGINX-依赖" class="headerlink" title="安装 NGINX 依赖"></a>安装 NGINX 依赖</h3><p>1、<strong><em><a href="http://pcre.org/" target="_blank" rel="noopener">PCRC</a></em></strong> 库: 被 NGINX <strong><em><a href="https://nginx.org/en/docs/ngx_core_module.html?_ga=2.65941421.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">Core</a></em></strong> 和 <strong><em><a href="https://nginx.org/en/docs/http/ngx_http_rewrite_module.html?_ga=2.65941421.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">Rewrite</a></em></strong> 模块需求, 并且提供正则表达式支持:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src &amp;&amp; wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.40.tar.gz &amp;&amp; tar -zxf pcre-8.40.tar.gz &amp;&amp; cd pcre-8.40 &amp;&amp; ./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>2、<strong><em><a href="http://www.zlib.net/" target="_blank" rel="noopener">zlib</a></em></strong> 库: 为了头部压缩被 NGINX <strong><em><a href="https://nginx.org/en/docs/http/ngx_http_gzip_module.html?_ga=2.65941421.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">Gzip</a></em></strong> 模块需求:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src &amp;&amp; wget http://zlib.net/zlib-1.2.11.tar.gz &amp;&amp; tar -zxf zlib-1.2.11.tar.gz &amp;&amp; cd zlib-1.2.11 &amp;&amp; ./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>3、<strong><em><a href="https://www.openssl.org/" target="_blank" rel="noopener">OpenSSL</a></em></strong> 库: 被 NGINX SSL 模块需求用以支持 HTTPS 协议: </p><blockquote><p>这里博主并不选择源码安装=.=, 而是通过apt安装: </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get upgrade</span><br><span class="line">apt-get install -y libssl-dev openssl</span><br></pre></td></tr></table></figure><h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><p>NGINX 同时提供了稳定版本和主干版本的源码文件. 源码文件可以从 NGINX Open Source 下载页面下载:<br><a id="download" href="http://www.nginx.org/en/download.html" target="_blank" rel="noopener"><i class="fa fa-download"></i><span>Redirect Download Page</span><br></a><br>下载并解压最新的主干版本源码文件, 在命令行中输入下面的命令:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src &amp;&amp; wget http://nginx.org/download/nginx-1.12.0.tar.gz &amp;&amp; tar -zxvf nginx-1.12.0.tar.gz &amp;&amp; cd nginx-1.12.0</span><br></pre></td></tr></table></figure></p><h3 id="配置构建选项"><a href="#配置构建选项" class="headerlink" title="配置构建选项"></a>配置构建选项</h3><p>配置选项要使用 <code>./configure</code> 脚本来设置各种 NGINX 的参数, 其中包括源码和配置文件路径、编译器选项, 连接处理方法以及模块列表. 脚本最终创建了用于编译代码和安装 NGINX 的 Makefile 文件.<br>例如:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --sbin-path=/usr/local/nginx/nginx --conf-path=/usr/local/nginx/nginx.conf --pid-path=/usr/local/nginx/nginx.pid --with-pcre=../pcre-8.40 --with-zlib=../zlib-1.2.11 --with-http_ssl_module --with-stream --with-http_stub_status_module</span><br></pre></td></tr></table></figure></p><h4 id="配置-NGINX-路径"><a href="#配置-NGINX-路径" class="headerlink" title="配置 NGINX 路径"></a>配置 NGINX 路径</h4><p>配置脚本允许你设置 NGINX 二进制文件和配置文件的路径以及依赖库 （PCRC 或 SSL）的路径, 以便静态链接到 NGINX 二进制文件中. </p><p><code>–prefix=path</code>:<br>定义保存 NGINX 文件的目录. 目录也将被用于所有通过 <code>./configure</code> 设置的相对路径和 nginx.conf 配置文件的路径. 默认这个路径被设置为 <code>/usr/local/nginx</code>. </p><p><code>–sbin-path=path</code>:<br>设置 NGINX 可执行文件的名称. 这个名称仅在安装期间使用. 该文件默认的被命名为 <code>prefix/sbin/nginx</code>. </p><p><code>–conf-path=path</code>:<br>设置 NGINX 配置文件名称. 该文件默认的被命名为 <code>prefix/conf/nginx.conf</code>. </p><p>注意: 无论这个选项是什么, 你都可以在命令行中通过 -c 选项来指定使用不同的配置文件启动 NGINX. </p><p><code>–pid-path=path</code>:<br>设置存储主进程的进程 id 的 <code>nginx.pid</code> 文件名. 在安装以后, 文件名的路径总是可以在 <code>nginx.conf</code> 文件中被修改, 通过使用 pid 指令. 默认该文件被命名为 <code>prefix/logs/nginx.pid</code></p><p><code>–error-log-path=path</code>:<br>设置主要的错误, 警告和诊断文件的名字. 安装之后, 文件名总是可以在 <code>nginx.conf</code> 文件中使用 <code>error_log</code> 指令修改. 该文件默认被命名为 <code>prefix/logs/access.log</code>. </p><p><code>–user=name</code>:<br>设置凭据将被用于 NGINX worker 进程的非特权用户的名称. 在安装后, 这个名称可以通过使用 user 指令在 <code>nginx.conf</code> 文件中修改. 默认的名字是 nobody. </p><p><code>–group=name</code>:<br>设置凭据将被用于 NGINX worker 进程的用户组名. 在安装以后, 这个名称可以通过使用 user 指令在 <code>nginx.conf</code> 文件中修改. 默认地, 用户组名被设置为非特权用户的名字. </p><p><code>–with-pcre=path</code>:<br>设置 PCRE 库的源码的路径. 这个库在 <strong><em><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html?&amp;_ga=2.225233945.2064822644.1493181926-708921149.1492677721#location" target="_blank" rel="noopener">location</a></em></strong> 指令和 <strong><em><a href="https://nginx.org/en/docs/http/ngx_http_rewrite_module.html?_ga=2.225233945.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">ngx_http_rewrite_module</a></em></strong> 模块中被用于支持正则表达式. </p><p><code>–with-pcre-jit</code>:<br>使用 “just-in-time compilation” 支持（<strong><em><a href="https://nginx.org/en/docs/ngx_core_module.html?&amp;_ga=2.225233945.2064822644.1493181926-708921149.1492677721#pcre_jit" target="_blank" rel="noopener">pcre_jit</a></em></strong> 指令）来构建 PCRE 库. </p><p><code>–with-zlib=path</code>:<br>设置 zlib 库的源码的路径. 这个库被用于 <strong><em><a href="https://nginx.org/en/docs/http/ngx_http_gzip_module.html?_ga=2.252710794.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">ngx_http_gzip_module</a></em></strong> 模块中. </p><h4 id="配置-NGINX-GCC-选项"><a href="#配置-NGINX-GCC-选项" class="headerlink" title="配置 NGINX GCC 选项"></a>配置 NGINX GCC 选项</h4><p>在配置脚本中你也可以指定编译器关联选项:<br><code>–with-cc-opt=parameters</code>:<br>设置添加到 CFLAGS 变量中的附加参数. 在 FreeBSD 系统下, 当使用系统 PCRE 库的时候, <code>–with-cc-opt=-I/usr/local/include</code> 必须被指定. </p><p>如果被select支持的文件数量需要增加, 那么也可以像这下面这样指定: <code>–with-cc-opt=-D/FD_SETSIZE=2048</code>. </p><p><code>–with-ld-opt=parameters</code>:<br>设置将用于链接时的附加参数. 当在 FreeBSD 下使用系统 PCRE 库时, <code>–with-cc-opt=-L/usr/local/lib</code> 必须被指定. </p><h4 id="指定-NGINX-连接处理方法"><a href="#指定-NGINX-连接处理方法" class="headerlink" title="指定 NGINX 连接处理方法"></a>指定 NGINX 连接处理方法</h4><p>在配置脚本中, 你可以重新定义基于事件的轮询方法. 查看 <strong><em><a href="https://nginx.org/en/docs/events.html?_ga=2.221072283.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">Connection Processing Methods</a></em></strong> 了解更多内容.<br><code>–with-select_module</code>,<code>–without-select_module</code>:<br>启用或禁用构建允许 NGINX 使用 select 方法工作的模块. 如果平台没有明确支持想 kqueue,epoll,/dev/poll这样更加合适的方法, 该模块将被自动构建. </p><p><code>–with-poll_module</code>,<code>–without-poll-module</code>:<br>启用或禁用构建允许 NGINX 使用 poll() 方法工作的模块. 如果该平台没有明确支持像 kqueue,epoll,/dev/poll 这样更加更是的方法, 该模块将被自动构建. </p><h4 id="NGINX-模块"><a href="#NGINX-模块" class="headerlink" title="NGINX 模块"></a>NGINX 模块</h4><p>模块的 NGINX 常量. 模块的设置就如其他构建选项一样被配置在 <code>./configure</code> 脚本中.<br>有一些模块被自动构建——他们不需要在配置脚本中指定. 然而, 一些默认的模块可以被排除在 NGINX 二进制文件之外, 通过在配置脚本中使用 <code>-without-</code> 配置选项.<br>模块默认不包含第三方模块, 必须在配置脚本中使用其他的构建选项明确指定才行. 这些模块可以被链接到 NGINX 二进制文件, 以静态的方式在每次启动 NGINX 被加载, 或者如果他们在配置文件中被指定则以动态的方式被加载. </p><h4 id="默认的模块构建"><a href="#默认的模块构建" class="headerlink" title="默认的模块构建"></a>默认的模块构建</h4><p>如果你不需要一个默认的构建模块, 你可以通过使用 <code>–without-</code> 前缀的模块名来禁用它:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --sbin-path=/usr/local/nginx/nginx --conf-path=/usr/local/nginx/nginx.conf --pid-path=/usr/local/nginx/nginx.pid --with-http_ssl_module --with-stream --with-pcre=../pcre-8.40 --with-zlib=../zlib-1.2.11 --without-http_empty_gif_module</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>模块名称</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://nginx.org/en/docs/http/ngx_http_charset_module.html?_ga=2.81192606.806275146.1493177927-708921149.1492677721" target="_blank" rel="noopener"><strong><em>http_charset_module</em></strong></a></td><td>向 Content-Type 响应 header 域添加指定的字符集, 能够覆盖数据从一种编码到另外一种.</td></tr><tr><td><strong><em><a href="https://nginx.org/en/docs/http/ngx_http_gzip_module.html?_ga=2.263596489.438601762.1493179575-708921149.1492677721" target="_blank" rel="noopener">http_gzip_module</a></em></strong></td><td>使用 gzip 方法压缩响应, 有助于将传输的数据减少至少一半.</td></tr><tr><td><strong><em><a href="https://nginx.org/en/docs/http/ngx_http_ssi_module.html?_ga=2.258467593.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">http_ssi_module</a></em></strong></td><td>通过它在响应中处理 SSI (Server Side Includes) 命令.</td></tr><tr><td><strong><em><a href="https://nginx.org/en/docs/http/ngx_http_userid_module.html?_ga=2.258467593.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">http_userid_module</a></em></strong></td><td>为客户端鉴定设置 cookies 适配.</td></tr><tr><td><strong><em><a href="https://nginx.org/en/docs/http/ngx_http_access_module.html?_ga=2.258467593.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">http_access_module</a></em></strong></td><td>限制对特定客户端地址的访问</td></tr><tr><td><strong><em><a href="https://nginx.org/en/docs/http/ngx_http_auth_basic_module.html?_ga=2.258467593.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">http_auth_basic_module</a></em></strong></td><td>通过使用 HTTP Basic Authentication 协议验证用户名和密码来限制访问资源.</td></tr><tr><td><strong><em><a href="https://nginx.org/en/docs/http/ngx_http_autoindex_module.html?_ga=2.195961647.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">http_autoindex_module</a></em></strong></td><td>处理以斜线（/）结束的请求并产生一个目录列表.</td></tr><tr><td><strong><em><a href="https://nginx.org/en/docs/http/ngx_http_geo_module.html?_ga=2.195961647.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">http_geo_module</a></em></strong></td><td>创建依赖客户端 IP 地址值的变量.</td></tr><tr><td><strong><em><a href="https://nginx.org/en/docs/http/ngx_http_map_module.html?_ga=2.195961647.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">http_map_module</a></em></strong></td><td>创建依赖其他变量值的变量.</td></tr><tr><td><strong><em><a href="https://nginx.org/en/docs/http/ngx_http_split_clients_module.html?_ga=2.195961647.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">http_split_clients_module</a></em></strong></td><td>创建适配 AB 测试的变量, 也被称为分隔测试.</td></tr><tr><td><strong><em><a href="https://nginx.org/en/docs/http/ngx_http_referer_module.html?_ga=2.195961647.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">http_referer_module</a></em></strong></td><td>如果请求的 header 域中的 Referer 使用了无效值, 阻止其访问站点.</td></tr><tr><td><strong><em><a href="https://nginx.org/en/docs/http/ngx_http_rewrite_module.html?_ga=2.65405741.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">http_rewrite_module</a></em></strong></td><td>使用正则表达式改变请求的 URI 并重定向. 有条件的选择. 需要 PCRE 库支持.</td></tr><tr><td><strong><em><a href="https://nginx.org/en/docs/http/ngx_http_proxy_module.html?_ga=2.65405741.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">http_proxy_module</a></em></strong></td><td>传递请求到其他服务器.</td></tr><tr><td><strong><em><a href="https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html?_ga=2.65405741.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">http_fastcgi_module</a></em></strong></td><td>传递请求到 FastCGI 服务器.</td></tr><tr><td><strong><em><a href="https://nginx.org/en/docs/http/ngx_http_uwsgi_module.html?_ga=2.65405741.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">http_uwsgi_module</a></em></strong></td><td>传递请求到 uwsgi 服务器.</td></tr><tr><td><strong><em><a href="https://nginx.org/en/docs/http/ngx_http_scgi_module.html?_ga=2.65405741.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">http_scgi_module</a></em></strong></td><td>传递请求到 SCGI 服务器.</td></tr><tr><td><strong><em><a href="https://nginx.org/en/docs/http/ngx_http_memcached_module.html?_ga=2.65405741.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">http_memcached_module</a></em></strong></td><td>从 memcached 服务器中获取响应.</td></tr><tr><td><strong><em><a href="https://nginx.org/en/docs/http/ngx_http_limit_conn_module.html?_ga=2.65405741.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">http_limit_conn_module</a></em></strong></td><td>限制每个定义的 key 的连接数量, 特别是来自单一 IP 地址的连接数量.</td></tr><tr><td><strong><em><a href="https://nginx.org/en/docs/http/ngx_http_limit_req_module.html?_ga=2.65405741.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">http_limit_req_module</a></em></strong></td><td>限制每个定义的 key 的请求处理率, 特别是来自单一 IP 地址的处理率.</td></tr><tr><td><strong><em><a href="https://nginx.org/en/docs/http/ngx_http_empty_gif_module.html?_ga=2.60746670.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">http_empty_gif_module</a></em></strong></td><td>发出单像素透明 GIF.</td></tr><tr><td><strong><em><a href="https://nginx.org/en/docs/http/ngx_http_browser_module.html?_ga=2.60746670.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">http_browser_module</a></em></strong></td><td>创建依赖请求 header 域中的 “User-Agent” 值的变量.</td></tr><tr><td><strong><em><a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html?&amp;_ga=2.60746670.2064822644.1493181926-708921149.1492677721#hash" target="_blank" rel="noopener">http_upstream_hash_module</a></em></strong></td><td>开启 hash 负载均衡方法.</td></tr><tr><td><strong><em><a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html?&amp;_ga=2.60746670.2064822644.1493181926-708921149.1492677721#ip_hash" target="_blank" rel="noopener">http_upstream_ip_hash_module</a></em></strong></td><td>开启 IP hash 负载均衡方法.</td></tr><tr><td><strong><em><a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html?&amp;_ga=2.60746670.2064822644.1493181926-708921149.1492677721#least_conn" target="_blank" rel="noopener">http_upstream_least_conn_module</a></em></strong></td><td>开启 least_conn 负载均衡方法.</td></tr><tr><td><strong><em><a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html?&amp;_ga=2.60746670.2064822644.1493181926-708921149.1492677721#keepalive" target="_blank" rel="noopener">http_upstream_keepalive_module</a></em></strong></td><td>开启持续连接.</td></tr><tr><td><strong><em><a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html?&amp;_ga=2.60746670.2064822644.1493181926-708921149.1492677721#zone" target="_blank" rel="noopener">http_upstream_zone_module</a></em></strong></td><td>开启共享内存区.</td></tr></tbody></table><h4 id="非默认构建的模块"><a href="#非默认构建的模块" class="headerlink" title="非默认构建的模块"></a>非默认构建的模块</h4><p>一些 NGINX 模块<strong>不是默认构建</strong>的. 你需要通过添加到 <code>./configure</code> 命令去手动启用他们. <a href="https://nginx.org/en/docs/mail/ngx_mail_core_module.html?_ga=2.225839129.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">mail</a>,<a href="https://nginx.org/en/docs/stream/ngx_stream_core_module.html?_ga=2.225839129.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">stream</a>,<a href="https://nginx.org/en/docs/http/ngx_http_geoip_module.html?_ga=2.225839129.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">geoip</a>,<a href="https://nginx.org/en/docs/http/ngx_http_image_filter_module.html?_ga=2.225839129.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">image_filter</a>,<a href="https://nginx.org/en/docs/http/ngx_http_perl_module.html?_ga=2.225839129.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">perl</a>和<a href="https://nginx.org/en/docs/http/ngx_http_xslt_module.html?_ga=2.230180639.2064822644.1493181926-708921149.1492677721" target="_blank" rel="noopener">xslt</a> 模块可以被动态编译. 查看 <strong><em><a href="https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/#modules_dynamic" target="_blank" rel="noopener">Dynamic Modules</a></em></strong> 来了解更多内容. </p><p>例如, <code>./configure</code> 命令包含了这些模块:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --sbin-path=/usr/local/nginx/nginx --conf-path=/usr/local/nginx/nginx.conf --pid-path=/usr/local/nginx/nginx.pid --with-pcre=../pcre-8.40 --with-zlib=../zlib-1.2.11 --with-http_ssl_module --with-stream --with-mail</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>–with-threads</td><td>允许 NGINX 使用线程池. 查看详情: <strong><em> <a href="https://www.nginx.com/blog/thread-pools-boost-performance-9x/" target="_blank" rel="noopener">Thread Pools in NGINX Boost Performance 9x!</a></em></strong></td></tr><tr><td>–with-file-aio</td><td>启用异步 I/O.</td></tr><tr><td>–with-ipv6</td><td>启用 IPv6 支持.</td></tr><tr><td>–with-http_ssl_module</td><td>提供 HTTPS 支持. 需要 SSL 库, 如 <strong><em><a href="https://www.openssl.org/" target="_blank" rel="noopener">OpenSSL</a></em></strong>. 配置参考: <strong><em><a href="https://nginx.org/en/docs/http/ngx_http_ssl_module.html?_ga=2.115793734.1190757652.1493193149-708921149.1492677721" target="_blank" rel="noopener">ngx_http_ssl_module</a></em></strong></td></tr><tr><td>–with-http_v2_module</td><td>提供 HTTP/2 支持. 配置参考: <strong><em><a href="https://nginx.org/en/docs/http/ngx_http_v2_module.html?_ga=2.69656016.1190757652.1493193149-708921149.1492677721" target="_blank" rel="noopener">ngx_http_v2_module</a></em></strong>, 更多信息: <strong><em><a href="https://www.nginx.com/blog/http2-module-nginx/" target="_blank" rel="noopener">HTTP/2 Module in NGINX</a></em></strong></td></tr><tr><td>–with-http_realip_module</td><td>修改客户端地址为在指定 header 域中的发送地址. 参考配置: <strong><em><a href="https://nginx.org/en/docs/http/ngx_http_realip_module.html?_ga=2.114613063.1190757652.1493193149-708921149.1492677721" target="_blank" rel="noopener">ngx_http_realip_module</a></em></strong></td></tr><tr><td>–with-http_addition_module</td><td>在响应的前后添加文本. 配置参考: <strong><em><a href="https://nginx.org/en/docs/http/ngx_http_addition_module.html?_ga=2.114613063.1190757652.1493193149-708921149.1492677721" target="_blank" rel="noopener">ngx_http_addition_module</a></em></strong></td></tr><tr><td>–with-http_xslt_module 或 –with-http_xslt_module=dynamic</td><td>使用一种或多种 XSLT 样式表来转换 XML 响应. 该模块需要 <a href="http://xmlsoft.org/" target="_blank" rel="noopener">Libxml2</a> 和 <a href="http://xmlsoft.org/XSLT/" target="_blank" rel="noopener">XSLT</a> 库. 配置参考: <strong><em><a href="https://nginx.org/en/docs/http/ngx_http_xslt_module.html?_ga=2.107494082.1190757652.1493193149-708921149.1492677721" target="_blank" rel="noopener">ngx_http_xslt_module</a></em></strong></td></tr><tr><td>–with-http_image_filter_module 或 –with-http_image_filter_module=dynamic</td><td>将图片在 JPEG、GIF 和 PNG 中转换格式. 该模块需要 LibGD 库. 配置参考: <strong><em><a href="https://nginx.org/en/docs/http/ngx_http_image_filter_module.html?_ga=2.107494082.1190757652.1493193149-708921149.1492677721" target="_blank" rel="noopener">ngx_http_image_filter_module</a></em></strong></td></tr><tr><td>–with-http_geoip_module 或 –with-http_geoip_module=dynamic</td><td>允许创建依赖客户端 IP 地址值的变量. 该模块使用了 <a href="http://www.maxmind.com/" target="_blank" rel="noopener">MaxMind</a> GeoIP 数据库. 配置参考: <strong><em><a href="https://nginx.org/en/docs/http/ngx_http_geoip_module.html?_ga=2.114618951.1190757652.1493193149-708921149.1492677721" target="_blank" rel="noopener">ngx_http_geoip_module</a></em></strong></td></tr><tr><td>–with-http_sub_module</td><td>通过使用其他的字符串替换指定字符串修改响应. 配置参考: <strong><em><a href="https://nginx.org/en/docs/http/ngx_http_sub_module.html?_ga=2.114618951.1190757652.1493193149-708921149.1492677721" target="_blank" rel="noopener">ngx_http_sub_module</a></em></strong></td></tr><tr><td>–with-http_dav_module</td><td>用于通过 WebDAV 协议的文件管理自动化. 配置参考: <strong><em><a href="https://nginx.org/en/docs/http/ngx_http_dav_module.html?_ga=2.114618951.1190757652.1493193149-708921149.1492677721" target="_blank" rel="noopener">ngx_http_dav_module</a></em></strong></td></tr><tr><td>–with-http_flv_module</td><td>为 Flash Video (FLV) 文件提供伪流服务器端支持. 配置参考: ngx <strong><em><a href="https://nginx.org/en/docs/http/ngx_http_flv_module.html?_ga=2.114618951.1190757652.1493193149-708921149.1492677721" target="_blank" rel="noopener">http_flv_module</a></em></strong></td></tr><tr><td>–with-mp4_module</td><td>为 MP4 文件提供伪流服务器端支持. 配置参考: <strong><em><a href="https://nginx.org/en/docs/http/ngx_http_mp4_module.html?_ga=2.114618951.1190757652.1493193149-708921149.1492677721" target="_blank" rel="noopener">ngx_http_mp4_module</a></em></strong></td></tr><tr><td>–with-http_gunzip_module</td><td>使用 Content-Encoding 解压响应: gzip 用于不支持 zip 编码方法的客户端. 配置参考: <strong><em><a href="https://nginx.org/en/docs/http/ngx_http_gunzip_module.html?_ga=2.177683941.1190757652.1493193149-708921149.1492677721" target="_blank" rel="noopener">ngx_http_gunzip_module</a></em></strong></td></tr><tr><td>–with-http_gzip_static_module</td><td>允许发送使用 <code>*.gz</code> 文件扩展名而不是常规的预压缩文件. 配置参考: <strong><em><a href="https://nginx.org/en/docs/http/ngx_http_gzip_static_module.html?_ga=2.177683941.1190757652.1493193149-708921149.1492677721" target="_blank" rel="noopener">ngx_http_gzip_static_module</a></em></strong></td></tr><tr><td>–with-http_auth_request_module</td><td>基于子请求实施客户端授权. 配置参考: <strong><em><a href="https://nginx.org/en/docs/http/ngx_http_auth_request_module.html?_ga=2.177683941.1190757652.1493193149-708921149.1492677721" target="_blank" rel="noopener">http_auth_request_module</a></em></strong></td></tr><tr><td>–with-http_random_index_module</td><td>处理使用斜杠 (/) 结尾的请求, 并且从一个目录取出一个随机文件来作为首页. 配置参考: <strong><em><a href="https://nginx.org/en/docs/http/ngx_http_random_index_module.html?_ga=2.177683941.1190757652.1493193149-708921149.1492677721" target="_blank" rel="noopener">ngx_http_random_index_module</a></em></strong></td></tr><tr><td>–with-http_secure_link_module</td><td>用于插件被请求链接的授权, 保护资源不被未授权访问或者限制链接的生命周期. 配置参考: <strong><em><a href="https://nginx.org/en/docs/http/ngx_http_secure_link_module.html?_ga=2.177683941.1190757652.1493193149-708921149.1492677721" target="_blank" rel="noopener">ngx_http_secure_link_module</a></em></strong></td></tr><tr><td>–with-http_slice_module</td><td>允许将请求分隔为子请求, 每个请求返回确定的响应范围. 提供更多大型文件的有效缓存. 查看 ngx_http_slice_module 相关的指令列表. 配置参考: <strong><em><a href="https://nginx.org/en/docs/http/ngx_http_slice_module.html?_ga=2.177683941.1190757652.1493193149-708921149.1492677721" target="_blank" rel="noopener">ngx_http_slice_module</a></em></strong></td></tr><tr><td>–with-http_degradation_module</td><td>当内存超出默认值的时候, 允许返回错误信息</td></tr><tr><td>–with-http_stub_status_module</td><td>提供访问基本状态信息. 配置参考: <strong><em><a href="https://nginx.org/en/docs/http/ngx_http_stub_status_module.html?_ga=2.207099347.1190757652.1493193149-708921149.1492677721" target="_blank" rel="noopener">ngx_http_stub__status_module</a></em></strong>. 注意 NGINX Plus 用户不需要这个模块, 因为已经为他们提供了扩展状态的面板.</td></tr><tr><td>–with-http_perl_module 或 –with-http_perl_module=dynamic</td><td>用于在 Perl 中实现位置和变量句柄, 并且将 Perl 调用插入到 SSI 中. 需要 <a href="https://www.perl.org/get.html" target="_blank" rel="noopener">PERL</a> 库. 配置参考: <strong><em><a href="https://nginx.org/en/docs/http/ngx_http_perl_module.html?_ga=2.207099347.1190757652.1493193149-708921149.1492677721" target="_blank" rel="noopener">ngx_http_perl_module</a></em></strong> . 该模块也可以被动态编译.</td></tr><tr><td>–with-mail 或 –with-mail=dynamic</td><td>启用邮件代理功能. 配置参考: <strong><em><a href="https://nginx.org/en/docs/mail/ngx_mail_core_module.html?_ga=2.207099347.1190757652.1493193149-708921149.1492677721" target="_blank" rel="noopener">ngx_mail_core_module</a></em></strong> . 该模块也可以被动态编译.</td></tr><tr><td>–with-mail_ssl_module</td><td>为使用 SSL/TLS 协议工作的邮件代理服务器提供支持. 需要想 <a href="https://www.openssl.org/" target="_blank" rel="noopener">OpenSSL</a> 这样的 SSL 库. 配置参考: <strong><em><a href="https://nginx.org/en/docs/mail/ngx_mail_ssl_module.html?_ga=2.174071266.1190757652.1493193149-708921149.1492677721" target="_blank" rel="noopener">ngx_mail_ssl_module</a></em></strong></td></tr><tr><td>–with-stream 或 –with-stream=dynamic</td><td>开启 TCP 代理功能. 配置参考: <strong><em><a href="https://nginx.org/en/docs/stream/ngx_stream_core_module.html?_ga=2.174071266.1190757652.1493193149-708921149.1492677721" target="_blank" rel="noopener">ngx_stream_code_module</a> </em></strong>. 该模块可以被动态编译.</td></tr><tr><td>–with-google_perftools_module</td><td>允许使用 Google Performance 工具库.</td></tr><tr><td>–with-cpp_test_module 或 –with-debug</td><td>开启<strong><em><a href="https://www.nginx.com/resources/admin-guide/debugging-nginx" target="_blank" rel="noopener">调试日志</a></em></strong>.</td></tr></tbody></table><h4 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h4><p>你可以使用你自己的模块或者第三方模块扩展 NGINX 的功能通过编译 NGINX 源码. 一些第三方模块被列举在 <a href="https://nginx.com/resources/wiki/modules/" target="_blank" rel="noopener">https://nginx.com/resources/wiki/modules/</a> 页面中. 使用第三方模块的你将要承担稳定性无法保证的风险. </p><p><strong>静态链接模块</strong><br>被构建在 NGINX 源码中的大多数模块是被静态链接的: 他们在编译的时候被构建在 NGINX 源码中, 然后被静态的了链接到 NGINX 二进制文件中. 这些模块只能在 NGINX 重新编译之后才能禁用.<br>要使用静态链接的第三方模块去编译 NGINX 源码, 在配置脚本中要指定 <code>–add-module=option</code> 并且输入模块的路径:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  ./configure ... --add-module=/usr/build/nginx-rtmp-module</span></span><br></pre></td></tr></table></figure></p><p><strong>动态链接模块</strong><br>NGINX 模块也可以被编译为一个共享对象（<em>.so 文件）, 然后在运行时动态的加载到 NGINX 中. 这样提供了更多的灵活性, 作为模块可以在任何时候被加载或反加载通过在 NGINX 配置文件中使用 **</em><a href="https://nginx.org/en/docs/ngx_core_module.html?&amp;_ga=2.111565380.1190757652.1493193149-708921149.1492677721#load_module" target="_blank" rel="noopener">load_module</a>*** 指令指定. 注意: 这种模块必须支持动态链接.<br>要使用动态加载第三方模块编译 NGINX 源码, 在配置脚本中要指定 <code>–add-dynamic-module=</code>配置选项和模块的路径.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  ./configure ... --add-dynamic-module=/path/to/module</span></span><br></pre></td></tr></table></figure></p><p>动态模块的结果文件 .so 在编译结束后在 <code>prefix/modules/</code> 目录中被找到, prefix 是保存服务器文件的目录, 如: <code>/usr/local/nginx/modules</code>. 要想加载动态模块, 在 NGINX 安装完成后使用 <strong><em><a href="https://nginx.org/en/docs/ngx_core_module.html?&amp;_ga=2.136254193.1190757652.1493193149-708921149.1492677721#load_module" target="_blank" rel="noopener">local_module</a></em></strong> 指令.<br>查看 <strong><em><a href="https://www.nginx.com/blog/dynamic-modules-nginx-1-9-11/" target="_blank" rel="noopener">Introducing Dynamic Modules in NGINX 1.9.11</a></em></strong> 和 <strong><em><a href="https://www.nginx.com/resources/wiki/extending/" target="_blank" rel="noopener">Extending NGINX</a> </em></strong>来了解更多内容. </p><h3 id="完成安装"><a href="#完成安装" class="headerlink" title="完成安装"></a>完成安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx --with-pcre=../pcre-8.40 --with-zlib=../zlib-1.2.11 --with-http_stub_status_module --with-http_ssl_module</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>到此NGINX已经安装完成, 但是, 此时直接敲<code>nginx</code>可能会显示没有找到命令, 因为<strong>还没有配置环境变量</strong>:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">touch /etc/profile.d/nginx.sh</span><br><span class="line">echo "PATH=$PATH:/usr/local/nginx/sbin" &gt;&gt; /etc/profile.d/nginx.sh</span><br><span class="line">echo "export PATH" &gt;&gt; /etc/profile.d/nginx.sh</span><br><span class="line">source /etc/profile.d/nginx.sh</span><br></pre></td></tr></table></figure></p><p>完成！查看NGINX:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure></p><h2 id="预编译包安装"><a href="#预编译包安装" class="headerlink" title="预编译包安装"></a>预编译包安装</h2><blockquote><p>博主用的就是这种方式, <strong>简单粗暴</strong>！当然上面的方式也是过, 但毕竟只是个业余的, 手动一个个模块配置上去的话, 小白表示搞不定. </p></blockquote><h3 id="添加源"><a href="#添加源" class="headerlink" title="添加源"></a>添加源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo "deb http://nginx.org/packages/ubuntu/ trusty nginx" &gt;&gt; /etc/apt/sources.list</span><br><span class="line">echo "deb-src http://nginx.org/packages/ubuntu/ trusty nginx" &gt;&gt; /etc/apt/sources.list</span><br></pre></td></tr></table></figure><h3 id="更新并导入升级Key完成安装"><a href="#更新并导入升级Key完成安装" class="headerlink" title="更新并导入升级Key完成安装"></a>更新并导入升级Key完成安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/keys/nginx_signing.key &amp;&amp; apt-key add nginx_signing.key &amp;&amp; apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get install openssl nginx</span><br></pre></td></tr></table></figure><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -V</span><br></pre></td></tr></table></figure><h1 id="NGINX初学"><a href="#NGINX初学" class="headerlink" title="NGINX初学"></a>NGINX初学</h1><h2 id="校验-启动-停止和重新加载配置"><a href="#校验-启动-停止和重新加载配置" class="headerlink" title="校验, 启动, 停止和重新加载配置"></a>校验, 启动, 停止和重新加载配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 校验</span></span><br><span class="line">nginx -t </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止、退出、重新加载配置、重启</span></span><br><span class="line">nginx -s stop|quit|reload|reopen</span><br></pre></td></tr></table></figure><p>也可以是这样:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -s QUIT 1888 #1888是nginx的PID</span><br></pre></td></tr></table></figure></p><p>要获取全部正在运行中的 nginx 进程列表, 可以使用 ps 工具, 就像下面这样:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ax | grep nginx</span><br></pre></td></tr></table></figure></p><p>如果要了解更多的有关信号发送的信息, 请查看<strong><em><a href="http://nginx.org/en/docs/control.html" target="_blank" rel="noopener">控制nginx</a></em></strong>. </p><h2 id="配置文件的结构"><a href="#配置文件的结构" class="headerlink" title="配置文件的结构"></a>配置文件的结构</h2><p>nginx 由被配置文件指定的指令控制的模块组成. 指令被分为简单指令和块指令. 简单指令有名称和参数组成, 通过空格来分隔开, 以 <code>;</code> 号来结束. 块指令拥有和简单指令一样的结构, 但是不用 <code>;</code> 结束而是使用一组被 <code>{}</code> 环绕的额外指令. 如果一个块指令在其内部包含了其他指令, 则被称为上下文（context）, 比如: <strong><em><a href="http://nginx.org/en/docs/ngx_core_module.html#events" target="_blank" rel="noopener">events</a></em></strong>,<strong><em><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#http" target="_blank" rel="noopener">http</a></em></strong>,<strong><em><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#server" target="_blank" rel="noopener">server</a></em></strong> 和<strong><em><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#location" target="_blank" rel="noopener">location</a></em></strong>. </p><p>被放置在配置文件中却不在任何上下文中的指令被认为是在主上下文之内的. <code>events</code> 和 <code>http</code> 指令就属于主上下文, <code>server</code> 在 <code>http</code> 之内, <code>location</code> 在 <code>server</code> 之内. </p><p>单行之中在 <code>#</code> 号之后的剩余内容被认为是注释. </p><h2 id="静态内容服务"><a href="#静态内容服务" class="headerlink" title="静态内容服务"></a>静态内容服务</h2><p>一个重要的 web 服务器任务就是提供文件（比如图片或者静态 HTML 页面）. 你将会实现一个例子, 依赖于 request 请求, 文件将被从不同的本地目录（/data/www 和 /data/images）中提供. 这需要编辑配置文件并在 <code>http</code> 块之内使用两个 <code>location</code> 块来设置一个 <code>server</code> 块. </p><p>首先, 创建 <code>/data/www</code> 目录并且将一个名为 <code>index.html</code> 文件放进去, 然后在创建一个 <code>/data/images</code> 目录并放置一些图片在里面. </p><p>接下来, 打开配置文件. 默认的配置文件已经包含了一些 <code>server</code> 块的例子, 通常都被注释掉了. 那么现在, 注释掉全部块并且编写一个新的 <code>server</code>块吧: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常地, 配置文件可能包含了一些 <code>server</code> 块, 通过<strong><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#listen" target="_blank" rel="noopener">监听</a></strong>端口和<strong><a href="http://nginx.org/en/docs/http/server_names.html" target="_blank" rel="noopener">服务器名字</a></strong>来<strong><a href="http://nginx.org/en/docs/http/request_processing.html" target="_blank" rel="noopener">区分</a></strong>. 一旦 nginx 决定哪个服务处理请求, 将会试着添加以下 <code>location</code> 块到 <code>server</code> 块中: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    root /data/www;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 <code>location</code> 块说明了 <code>/</code> 前缀和请求中的 URI 进行比较. 对于匹配的请求, URI 将会被添加到被 <a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#root" target="_blank" rel="noopener">root</a> 指令说明的路径中去, 就是到 <code>/data/www</code> 中, 形成一个在本地文件系统中的请求文件路径. 如果有多个匹配了 <code>location</code> 的块, nginx 会<strong>选择前缀最长的那个</strong>. 上面的那个 <code>location</code> 块是最短的前缀, 长度只有 1, 所以只有其他 <code>location</code> 块匹配都失败了, 这个块才会被使用. </p><p>接下来, 添加第二个 <code>location</code> 块: </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">location</span> <span class="title">/images</span>/ &#123;</span><br><span class="line">    root /data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这将匹配以 <code>/images/</code> 开始的请求（location / 也会匹配这个请求, 但他的前缀最短）. </p><p>最终 <code>server</code> 块的配置看起来是像下面这样的: </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    <span class="keyword">location</span> <span class="title">/ &#123;</span></span><br><span class="line"><span class="title">        root</span> /data/www ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">location</span> <span class="title">/iamges</span>/ &#123;</span><br><span class="line">        root /data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置一个监听标准 80 端口并且可在本机访问的服务器的工作就是这样了. 在响应使用以 <code>/images/</code> 为开头的 URI 的请求中, 服务器会从 <code>/data/images</code> 目录中中发送文件. 例如, 在响应 <code>http://localhost/images/example.png</code> 的请求中, nginx 会发送 <code>/data/images/exmaple.png</code> 文件. 如果这个文件不存在, nginx 会发送一个  404 错误的响应. URI 不以 <code>/images/</code> 开头的请求将被映射到 <code>/data/www</code> 目录中. 例如, 在响应 <code>http://localhost/some/example.html</code> 的请求中, nginx 将发送 <code>/data/www/some/example.html</code> 文件. </p><p>要想应用新的配置, 请启动 nginx（如果还没启动的话）或者发送 <code>reload</code> 信号到 nginx 主进程, 通过执行如下命令: </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nginx -s reload</span></span><br></pre></td></tr></table></figure><blockquote><p>本例中, 有些不会像期望中的那样工作, 你可以在 <code>access.log</code> 和 <code>error.log</code> 文件中尝试找到原因, 这些文件的位置在 <code>/usr/local/nginx/logs</code> 或 <code>/var/log/nginx</code> 中. </p></blockquote><h2 id="设置一个简单的代理服务器"><a href="#设置一个简单的代理服务器" class="headerlink" title="设置一个简单的代理服务器"></a>设置一个简单的代理服务器</h2><p>nginx 的一个频繁的用法是被设置作为代理服务器, 这意味着接收请求的服务器, 通过他们到被代理的服务器, 再通过他们取回相应, 并且通过他们发送给客户端. </p><p>下面我们来配置一个基本的代理服务器, 来为本地图片请求提供服务并将其他请求转到被代理的服务器上. 本例中, 两个服务器将被定义在一个 nginx 实例中. </p><p>首先, 通过增加一个 <code>server</code> 块到 nginx 配置文件的方式定义被代理的服务, 配置内容如下: </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">root</span> /data/up1;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个监听 8080 端口并且映射全部请求到本地 <code>/data/up1</code> 目录的简单服务器. 创建这个目录并放一个 <code>index.html</code> 在里面. 注意, <code>root</code> 指令被放置在 <code>server</code> 上下文中, 这样的 <code>root</code> 指令被用在当 <code>location</code> 块被选中提供服务的时候. </p><p>接下来, 使用上一节的服务器配置并修改为一个代理服务器的配置. 在第一 <code>location</code> 块中, 放入使用由协议, 名字以及被代理服务器的端口描述的参数的 <code>proxy_pass</code> 指令（在我们的例子中, 就是 <a href="http://localhost:8080）" target="_blank" rel="noopener">http://localhost:8080）</a>: </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">localtion</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8080;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">localtion</span> /images/ &#123;</span><br><span class="line">        <span class="attribute">root</span> /data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将修改第二个 <code>location</code> 块, 它当前使用 <code>/images/</code> 前缀来映射请求到 <code>/data/images/</code> 下的文件, 我们现在想要让他匹配一些典型的图片类型扩展名的请求. 修改后的 <code>localtion</code> 块看起来像这样的: </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">localtion</span> <span class="regexp">~ \.(gif|jpg|png)$</span> &#123;</span><br><span class="line">    <span class="attribute">root</span> /data/images;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数是匹配了全部以 <code>.gif</code> <code>.jpg</code> <code>.png</code> 结尾的 URI 的正则表达式. 一个正则表达式应被 <code>~</code> 开始. 这样, 相关的请求就会被映射到 <code>/data/images/</code> 目录中了. </p><p>当 nginx 选取一个 <code>localtion</code> 块来为请求提供服务的时候, 首先要检查 <code>location</code> 指令说明的前缀, <strong>记住最长前缀</strong>的 <code>location</code>, <strong>然后再检查正则表达式</strong>. 如果匹配了一个正则表达式, nginx 挑出这个 <code>localtion</code>, 否则, 它就会挑选之前被记录的. </p><p>代理服务器的配置结果看起来将会是下面这样: </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    <span class="keyword">location</span> <span class="title">/ &#123;</span></span><br><span class="line"><span class="title">        proxy_pass</span> http://localhost:<span class="number">8080</span>/;</span><br><span class="line">    &#125;</span><br><span class="line">    localtion ~ \.(gif|jpg|png)$ &#123;</span><br><span class="line">        root /data/images;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个服务器将过滤以 <code>.gif</code> <code>.jpg</code> <code>.png</code> 结尾的请求, 并映射他们到 <code>/data/images</code> 目录（通过添加 URI 到 <code>root</code> 指令的参数）, 还会传递其他请求到被之前配置的被代理服务器上. </p><p>要应用新配置, 要像前面章节提到的发送 <code>reload</code> 信号给 nginx. </p><p>这里有<strong><a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html" target="_blank" rel="noopener">更多</a></strong>的可能更加有用的配置代理连接的指令. </p><h2 id="快速查看配置文件的方法"><a href="#快速查看配置文件的方法" class="headerlink" title="快速查看配置文件的方法"></a>快速查看配置文件的方法</h2><p>nginx的配置放在nginx.conf文件中, 一般我们可以使用以下命令查看服务器中存在的nginx.conf文件. </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">locate nginx.conf</span><br><span class="line">/usr/local/etc/nginx/nginx.conf</span><br><span class="line">/usr/local/etc/nginx/nginx<span class="selector-class">.conf</span><span class="selector-class">.default</span></span><br><span class="line">...<span class="number">1234</span></span><br></pre></td></tr></table></figure><p>如果服务器中存在多个nginx.conf文件, 我们并不知道实际上调用的是哪个配置文件, 因此我们<strong>必须找到实际调用的配置文件</strong>才能进行修改. </p><h2 id="查看NGINX实际调用的配置文件"><a href="#查看NGINX实际调用的配置文件" class="headerlink" title="查看NGINX实际调用的配置文件"></a>查看NGINX实际调用的配置文件</h2><h3 id="1-查看NGINX路径"><a href="#1-查看NGINX路径" class="headerlink" title="1.查看NGINX路径"></a>1.查看NGINX路径</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep nginx</span><br><span class="line">root             <span class="number"> 352 </span>  0.0  0.0 <span class="number"> 2468624 </span>  <span class="number"> 924 </span>  ??  S    10:43上午   0:00.08 nginx: worker process  </span><br><span class="line">root             <span class="number"> 232 </span>  0.0  0.0 <span class="number"> 2459408 </span>  <span class="number"> 532 </span>  ??  S    10:43上午   0:00.02 nginx: master process /usr/local/opt/nginx/bin/nginx -g daemon off;  </span><br><span class="line">root            <span class="number"> 2345 </span>  0.0  0.0 <span class="number"> 2432772 </span>  <span class="number"> 640 </span>s000  S+    1:01下午   0:00.00 grep nginx1234</span><br></pre></td></tr></table></figure><p>NGINX的路径为: <code>/usr/local/opt/nginx/bin/nginx</code> </p><h3 id="2-查看NGINX配置文件路径"><a href="#2-查看NGINX配置文件路径" class="headerlink" title="2.查看NGINX配置文件路径"></a>2.查看NGINX配置文件路径</h3><p>使用NGINX的 <code>-t</code> 参数进行配置检查, 即可知道实际调用的配置文件路径及是否调用有效. </p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/opt/</span>nginx<span class="meta-keyword">/bin/</span>nginx -t</span><br><span class="line"><span class="symbol">nginx:</span> the configuration file <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/etc/</span>nginx/nginx.conf syntax is ok</span><br><span class="line"><span class="symbol">nginx:</span> configuration file <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/etc/</span>nginx/nginx.conf test is successful123</span><br></pre></td></tr></table></figure><p>测试可知, NGINX的配置文件路径为: <code>/usr/local/etc/nginx/nginx.conf</code> 且调用有效. </p><h2 id="拒绝或允许指定IP"><a href="#拒绝或允许指定IP" class="headerlink" title="拒绝或允许指定IP"></a>拒绝或允许指定IP</h2><p>NGINX拒绝或允许指定IP,是使用模块HTTP访问控制模块（HTTP Access）.<br>控制规则按照声明的顺序进行检查, 首条匹配IP的访问规则将被启用.<br>如下例: </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">  deny    <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>;</span><br><span class="line">  allow   <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span>;</span><br><span class="line">  allow   <span class="number">10.1</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">16</span>;</span><br><span class="line">  deny    all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子中仅允许192.168.1.0/24和10.1.1.0/16网络段访问这个<code>location</code>字段, 但192.168.1.1是个例外.<br>注意规则的匹配顺序, 如果你使用过Apache你可能会认为你可以随意控制规则的顺序并且他们能够正常的工作, 但实际上不行, 下面的这个例子将拒绝掉所有的连接: </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">  #这里将永远输出<span class="number">403</span>错误. </span><br><span class="line">  deny all;</span><br><span class="line">  #这些指令不会被启用, 因为到达的连接在第一条已经被拒绝</span><br><span class="line">  deny    <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>;</span><br><span class="line">  allow   <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span>;</span><br><span class="line">  allow   <span class="number">10.1</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><blockquote><p>参考:<br><strong><em><a href="https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/" target="_blank" rel="noopener">Installing NGINX Open Source</a></em></strong><br><strong><em><a href="https://www.crazy-code.tech/index.php/2016/11/11/nginx-beginner-guide/" target="_blank" rel="noopener">Nginx 初学者指南</a></em></strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://pnoc9e0c7.bkt.clouddn.com/NGINX.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;走上了VPS这条&lt;del&gt;不归路&lt;/del&gt;, 就意味着需要会维护以及运营自己的服务器. 那么这一章记录一下学习Nginx的一些东西…&lt;br&gt;本文绝大部分内容来自NGINX 网站的官方手册:&lt;br&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;http://nginx.org/en/docs/beginners_guide.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://nginx.org/en/docs/beginners_guide.html&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://www.dualbear.com/categories/Nginx/"/>
    
    
      <category term="VPS" scheme="https://www.dualbear.com/tags/VPS/"/>
    
      <category term="Nginx" scheme="https://www.dualbear.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.dualbear.com/2014/11/01/hello-world/"/>
    <id>https://www.dualbear.com/2014/11/01/hello-world/</id>
    <published>2014-11-01T12:10:33.000Z</published>
    <updated>2019-03-01T08:02:24.921Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\legolaserea.github.io\assets\css\APlayer.min.css"><script src="\legolaserea.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span></span><br></pre></td></tr></table></figure></p><table><thead><tr><th>项目</th><th style="text-align:right">价格</th><th style="text-align:center">数量</th></tr></thead><tbody><tr><td>计算机</td><td style="text-align:right">\$1600</td><td style="text-align:center">5</td></tr><tr><td>手机</td><td style="text-align:right">\$12</td><td style="text-align:center">12</td></tr><tr><td>管线</td><td style="text-align:right">\$1</td><td style="text-align:center">234</td></tr></tbody></table><p>: 是对齐方向</p><p>JavaScript 示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">nth element in the fibonacci series.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.write(fib(<span class="number">10</span>));</span><br></pre></td></tr></table></figure></p><p>！三个反引号之间没有空格</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://www.dualbear.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://www.dualbear.com/tags/javascript/"/>
    
  </entry>
  
</feed>
